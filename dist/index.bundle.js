"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[826],{852:(e,t,r)=>{const n=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=!1,a="",s=(e=e.trim()).length;if(t&&e.length<=0)return{isError:i=!0,msg:a="This field is Required!"};if(r>0&&s<r)return{isError:i=!0,msg:a="The min character length of this field is ".concat(r)};if(n>0&&s>n)return{isError:i=!0,msg:a="The max character length of this field is ".concat(n)};if(!o){var c=e.replace(/\s/g,""),l=/^[A-Za-z][A-Za-z0-9-_.]*$/;if(!l.test(c))return{isError:i=!0,msg:a="This field is only allow A-z0-9_.- characters and also first character should be A-z"}}return{isError:i,msg:a}};var o=document.getElementById("description"),i=document.querySelector(".show-msg"),a=document.querySelector(".btn-submit"),s=document.querySelector(".todo-items-gropu");document.querySelectorAll(".todo-des");const c=r.p+"images/three-dot-24.png",l=r.p+"images/trash-24.png";function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function u(e){return function(e){if(Array.isArray(e))return m(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return m(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?m(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,g(n.key),n)}}function v(e,t,r){return t&&f(e.prototype,t),r&&f(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function p(e,t,r){return(t=g(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function g(e){var t=function(e,t){if("object"!==d(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==d(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===d(t)?t:String(t)}var h=v((function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),p(this,"sortAndSave",(function(){var e=u(t.todos);e.sort((function(e,t){return e.index>t.index?1:e.index<t.index?-1:0}));var r=0;e.forEach((function(e){r+=1,e.index=r})),t.todos=u(e),localStorage.setItem("todos",JSON.stringify(t.todos))})),p(this,"render",(function(){s.innerHTML="",i.innerText="",i.classList.remove("form-error"),t.sortAndSave(),t.todos.length>0?t.todos.forEach((function(e){var r=document.createElement("li");r.id=e.index,r.className="todo-item";var n=document.createElement("input");n.setAttribute("type","checkbox"),n.id="todo-compleate";var o=document.createElement("p");o.className="todo-des",o.innerText=e.description,o.addEventListener("click",(function(e){t.onClickTodoDes(e)}));var i=document.createElement("button");i.className="btn-three-dot",i.innerHTML='<img src="'.concat(c,'" alt="...">'),r.append(n,o,i),s.appendChild(r)})):s.innerHTML='<p class="no-item">There is no todo to show! Please add a new one.</p>'})),p(this,"onSubmit",(function(){var e=o.value,r=n(e,!0,3,255,!1);if(!0===r.isError&&r.msg.length>=0)i.classList.add("form-error"),i.textContent=r.msg,o.classList.add("invalid");else{i.classList.remove("form-error"),i.textContent="",o.classList.remove("invalid"),o.value="";var a={description:e,completed:!1,index:t.todos.length+1||1};t.todos=[].concat(u(t.todos),[a]),t.render()}})),p(this,"delete",(function(e){t.todos=t.todos.filter((function(t){return t.index.toString()!==e})),t.render()})),p(this,"edit",(function(e){var r=e.target.value,o=n(r,!0,3,255,!1);if(!0===o.isError&&o.msg.length>0)i.classList.add("form-error"),i.textContent=o.msg,e.target.classList.add("invalid-edit");else{e.target.classList.remove("invalid-edit");var a=e.target.parentElement.id,s=u(t.todos),c=s.findIndex((function(e){return a===e.index.toString()}));c>=0&&(s[c].description=r),t.todos=u(s),t.render()}})),p(this,"onClickTodoDes",(function(e){var r=e.target.parentElement;r.innerHTML="";var n=document.createElement("input");n.setAttribute("type","checkbox"),n.id="todo-compleate";var o=document.createElement("input");o.setAttribute("type","text"),o.setAttribute("value",e.target.innerText),o.className="todo-edit-input",o.addEventListener("keypress",(function(e){"Enter"===e.key?(e.preventDefault(),t.edit(e)):(i.classList.remove("form-error"),i.innerText="",e.target.classList.remove("invalid-edit"))}));var a=document.createElement("button");a.className="btn-delete",a.innerHTML='<img src="'.concat(l,'" alt="X">'),a.addEventListener("click",(function(){var e=r.id;t.delete(e)})),r.append(n,o,a)})),localStorage.getItem("todos")?this.todos=JSON.parse(localStorage.getItem("todos")):this.todos=[]}));const b=r.p+"images/enter-24.png";var y=new h;o.addEventListener("keypress",(function(e){"Enter"===e.key?(e.preventDefault(),y.onSubmit()):(i.innerHTML="",i.classList.remove("form-error"),o.classList.remove("invalid"))})),a.addEventListener("click",(function(e){e.preventDefault(),y.onSubmit(),o.value=""})),window.onload=function(){y.render(),document.querySelector(".btn-submit").innerHTML="<img src='".concat(b,"' alt='submit'/>")}}},e=>{e(e.s=852)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,